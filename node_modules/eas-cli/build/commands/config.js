"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const config_1 = require("@expo/config");
const eas_build_job_1 = require("@expo/eas-build-job");
const eas_json_1 = require("@expo/eas-json");
const core_1 = require("@oclif/core");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const EasCommand_1 = tslib_1.__importDefault(require("../commandUtils/EasCommand"));
const AppPlatform_1 = require("../graphql/types/AppPlatform");
const log_1 = tslib_1.__importDefault(require("../log"));
const platform_1 = require("../platform");
const prompts_1 = require("../prompts");
class Config extends EasCommand_1.default {
    async runAsync() {
        const { flags } = await this.parse(Config);
        const { platform: maybePlatform, profile: maybeProfile } = flags;
        const { getDynamicProjectConfigAsync, projectDir } = await this.getContextAsync(Config, {
            nonInteractive: false,
        });
        const accessor = new eas_json_1.EasJsonAccessor(projectDir);
        const profileName = maybeProfile !== null && maybeProfile !== void 0 ? maybeProfile : (await (0, prompts_1.selectAsync)('Select build profile', (await eas_json_1.EasJsonUtils.getBuildProfileNamesAsync(accessor)).map(profileName => ({
            title: profileName,
            value: profileName,
        }))));
        const platform = maybePlatform !== null && maybePlatform !== void 0 ? maybePlatform : (await (0, prompts_1.selectAsync)('Select platform', [
            {
                title: 'Android',
                value: eas_build_job_1.Platform.ANDROID,
            },
            {
                title: 'iOS',
                value: eas_build_job_1.Platform.IOS,
            },
        ]));
        const profile = await eas_json_1.EasJsonUtils.getBuildProfileAsync(accessor, platform, profileName);
        const { exp: config } = await getDynamicProjectConfigAsync({
            env: profile.env,
            isPublicConfig: true,
        });
        log_1.default.addNewLineIfNone();
        log_1.default.log(chalk_1.default.bold((0, config_1.getProjectConfigDescription)(projectDir)));
        log_1.default.newLine();
        log_1.default.log(JSON.stringify(config, null, 2));
        log_1.default.newLine();
        log_1.default.newLine();
        const appPlatform = (0, AppPlatform_1.toAppPlatform)(platform);
        const platformEmoji = platform_1.appPlatformEmojis[appPlatform];
        log_1.default.log(`${platformEmoji} ${chalk_1.default.bold(`Build profile "${profileName}"`)}`);
        log_1.default.newLine();
        log_1.default.log(JSON.stringify(profile, null, 2));
    }
}
exports.default = Config;
_a = Config;
Config.description = 'display project configuration (app.json + eas.json)';
Config.flags = {
    platform: core_1.Flags.enum({ char: 'p', options: [eas_build_job_1.Platform.ANDROID, eas_build_job_1.Platform.IOS] }),
    profile: core_1.Flags.string({
        char: 'e',
        description: 'Name of the build profile from eas.json. Defaults to "production" if defined in eas.json.',
        helpValue: 'PROFILE_NAME',
    }),
};
Config.contextDefinition = {
    ..._a.ContextOptions.DynamicProjectConfig,
    ..._a.ContextOptions.ProjectDir,
};
